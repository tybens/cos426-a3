# This file was generated for the student.

# For information on YAML, see: https://yaml.org/spec/1.2.2/#chapter-2-language-overview

# YAML strings can be unquoted, quoted with single quotes, or quoted with
# double quotes. The type of quoting matters if you have special characters in
# the string, such as ":" or "#". To avoid ambiguity, we will use "block
# scalar" strings for `description_html`, `link`, and `caption_html`, in which
# the string starts on the next line and you can put any character you want.
# For more information, see: https://yaml-multiline.info/

# In `description_html` and `caption_html`, feel free to use HTML tags as you
# wish. These will show up as-is in `writeup.html`.

# Please fill in your name and NetID
# Your NetID is the part of your email before "@princeton.edu"
student:
  name: Tyler Benson
  netid: tb19

# If you would like to use any of your free late days on this assignment, please
# indicate how many here. This should be a non-negative integer; if you would
# like to add any special comments (for example, to reference an Ed post asking
# for special circumstances), please write a YAML comment here with the '#'
# character.
late_days_used: 0

# Please list the netids of whom you collaborated with for this assignment.
collaboration: [eveseley]

features:
  - feature: Trace Ray
    required: true
    implemented: true
    description_html: >
      Trace ray "traces" a ray around a scene and iteratively updates the color. Instead of a while loop, we use a for loop to calculate the intersection of the particular ray and then update it's color and reflection / refraction vector if appropriate.
    results:
      - link: >
          index.html
        picture: results/trace_ray.png
        caption_html: >
          This is the expected result after trace ray is implemented.

  - feature: Calculate Color
    required: true
    implemented: true
    description_html: >
      Calculate color iterates over all of the lights in the scene (or MAX_LIGHTS) and appends the light contribution to the output color of the ray. It is a direct lighting contribution scheme.
    results:
      - link: >
          index.html
        picture: results/diffuse.png
        caption_html: >
          This is the expected result after calculate color is implemented.

  - feature: Triangle
    required: true
    implemented: true
    description_html: >
      Triangle is a way of calculating whether the ray intersects with a triangle with three points defined. My implementation uses the optimized Moller-Trumbore algorithm. The source provided was used for its math. And chatGPT helped in organizing the rest.
    results:
      - link: >
          index.html
        picture: results/triangle.png
        caption_html: >
          This is the expected result after triangle is implemented.

  - feature: Sphere
    required: true
    implemented: true
    description_html: >
      My implementation calculates the intersection of a ray and a sphere and updates the intersection position and normal by following the Ray-Sphere Intersection II from Lecture 12.
    results:
      - link: >
          index.html
        picture: results/sphere.png
        caption_html: >
          This is the expected result after sphere is implemented.

  - feature: Axis-aligned Box
    required: true
    implemented: true
    description_html: >
      My implementation iterates over the three normals, for each sign of the normal, for a total of 6 iterations, finding the intersection with each of the 6 planes of an axis aligned box. It chooses the closer intersection using the provided helper function.
    results:
      - link: >
          index.html
        picture: results/box.png
        caption_html: >
          This is the expected result after box is implemented.

  - feature: Cylinder
    required: false
    implemented: true
    description_html: >
      The cylinder implementation calculates the intersection with both discs, top and bottom as well as the open cylinder surfaces. It then chooses the closest intersection using the provided helper function.
    results:
      - link: >
          index.html
        picture: results/cylinder2.png
        caption_html: >
          This is the expected result after cylinder is implemented.

  - feature: Cone
    required: false
    implemented: true
    description_html: >
      Cone implementation calculates the intersection with the cone surface and the bottom disc. It then chooses the closest intersection using the provided helper function.
    results:
      - link: >
          index.html
        picture: results/cone.png
        caption_html: >
          This is the expected result after cone is implemented. Also, transmission was implemented before cone, as the picture shows.

  - feature: Hard Shadows
    required: true
    implemented: true
    description_html: >
      To get hard shadows we create a shadow ray and then check if the shadow ray intersects with any of the objects in the scene. If it does, then we know that the point is in shadow and we do not add the light contribution to the color.
    results:
      - link: >
          index.html
        picture: results/shadows.png
        caption_html: >
          This is the expected result after hard shadows are implemented.

  - feature: Soft Shadows
    required: false
    implemented: false
    description_html: >
      (Your description of your implementation of Soft Shadows goes here...)
    results: []

  - feature: Transmission
    required: true
    implemented: true
    description_html: >
      For transmission we calculate the refraction vector by using the Snell's Law equation. We make sure to normalize too :)
    results:
      - link: >
          index.html
        picture: results/transmission.png
        caption_html: >
          This is the expected result after transmission is implemented.
      - link: >
          index.html
        picture: results/transmission2.png
        caption_html: >
          This is a cool zoomed in shot of the transmission effect on the glass orb.

  - feature: Checkerboard
    required: true
    implemented: true
    description_html: >
      To get a checkerboard effect, we quantize the coordinates and scale it to change the size of the resulting checkers before taking the mod to conditionally set the color.
    results:
      - link: >
          index.html
        picture: results/checkerboard.png
        caption_html: >
          This is the expected result after checkerboard is implemented.

  - feature: Phong Material
    required: true
    implemented: true
    description_html: >
      The phong implementation follows the math from Lecture and Precept. Also, a lot of influence was gathered by calculating contribution by comparing it to the diffusion (not phong material) calculations.
    results:
      - link: >
          index.html
        picture: results/phong.png
        caption_html: >
          This is the expected result after phong is implemented.

  - feature: Special Material
    required: false
    implemented: true
    description_html: >
      For special, we first create two tangent vectors to the normal vector. We use them to project the intersection point onto the tangent/bitangent plane. Then we use this projection as the input to the noise function. The output of noise is then used to perturb the color and mix it.
    results:
      - link: >
          index.html
        picture: results/special.png
        caption_html: >
          This is the expected result after special is implemented.

  - feature: Custom Scene
    required: false
    implemented: true
    description_html: >
      My custom scene is a snowman :)
    results:
      - link: >
          index.html
        picture: results/custom-scene.png
        caption_html: >
          Ray Tracer, the snowman. :)

  - feature: Animation
    required: false
    implemented: false
    description_html: >
      (Your description of your implementation of Animation goes here...)
    results: []

  - feature: Art Contest
    required: false
    implemented: true
    description_html: >
      (Your description of your implementation of Art Contest goes here...)
    results:
      - link: >
          index.html
        picture: results/interstellar_inside_mirror_box.png
        caption_html: >
          While debugging intersection triangle, I entered the mirror box and saw this. It kinda looks like that scene in interstellar where time is mapped into 3-d space.

      - link: >
          index.html
        picture: results/custom2.png
        caption_html: >
          I thought my custom scene was kinda cute. So I'll put that here as well :). It's a snowman. It's name is Tracer... Ray Tracer. :)

# Students who used AI-based coding tool(s) to work on this assignment should
# answer these questions: What tool(s) did you use? How did it work for you? Was
# it helpful? (To add text here, change the null to > and add indented text
# below it.)
ai_code_tools: >
  I used ChatGPT on this assignment. It was very helpful in providing boilerplate code for certain functions. I list them here: cone, cylinder, checkerboard, special. Specifically for special, it was very helpful. I could not find a source that looked exactly similar to GPT's implementation of `noise`; however, I did a lot of research on perlin noise (see my feedback below) to make me feel better about its implementation.

# [OPTIONAL] Please provide us with feedback on your experience working on this
# assignment. For example, approximately how many hours did you spend on it?
# What parts were the most difficult or confusing to work through? Do you have
# any suggestions on how to improve this assignment for the future? Thank you
# for your feedback! (To add text here, change the null to > and add indented
# text below it.)
feedback: >
  Check out these cool resources for perlin noise https://geniosainz.github.io/Perlin-Noise-Demo/, https://rtouti.github.io/graphics/perlin-noise-algorithm .
